{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red53\green118\blue190;
\red51\green51\blue51;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl480\sa320

\f0\fs44 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Regression Week 5: LASSO Assignment 2\
\pard\pardeftab720\sl420\sa280

\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 In this notebook, you will implement your very own LASSO solver via coordinate descent. You will:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa280
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Write a function to normalize features\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implement coordinate descent for LASSO\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Explore effects of L1 penalty\cb1 \
\pard\pardeftab720\sl480\sa320

\fs44 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If you are doing the assignment with IPython Notebook\
\pard\pardeftab720\sl420\sa280

\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 An IPython Notebook has been provided below to you for this quiz. This notebook contains the instructions, quiz questions and partially-completed code for you to use as well as some cells to test your code.\
\pard\pardeftab720\sl480\sa320

\fs44 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 What you need to download\
\pard\pardeftab720\sl480\sa240

\fs40 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If you are using GraphLab Create\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa280
\ls2\ilvl0
\fs28 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Download the King County House Sales data In SFrame format: {\field{\*\fldinst{HYPERLINK "https://eventing.coursera.org/api/redirectStrict/9ylKaJjrKxD9SlR88fLpjMFRrXaB5AFoT6jvRr4rcvZezROWFd0RPX4iQSoSxatp4WIXUGyFgM6QL2QOjDiIAw.OngQDPqOuNqvbbam7cVmpw.Pu3G9cQHCsYt1RsyADbRVt6frfSbTWVyAD6EsJWek_ncAknkcgwFfX6_onW8FfKmxUQENoRO4QVsUCAklPU67MC3Rii3sDWMXB2Od68R5FQZkbOofiqAEnudKpsswy7OJ7AGi8hRs7j9VBmmkndnZNWwj_EXyg7nxIXXCIsLhLQBj-jbWE2kQv0ot1RCbsg2ciM7Lw32IYaChhyraQoPb21kdarps6zACg6caEAtynPLAhq8G02m34qpBDVtnxd9UGl5yROK-N4IaBDeHngHFtB7Xx8og04EBQ9oXG1CUHdzu5kpPQTn8pUgQ_5l4v7aCUE_iqe9618ruSauTJtzPsbssaHCg2n7OlqAUmxMYpRR1A3HTx5xHlGrcGuM5pyn9LxJlp5GyHpr7DlgYXbO1FGi3FJYGDDLQ632zCJJWqmm8vjW2JFGCVibK4nFhjIM"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 kc_house_data.gl.zip}}\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Download the companion IPython Notebook: {\field{\*\fldinst{HYPERLINK "https://eventing.coursera.org/api/redirectStrict/B35eaWhK3fBCeb6gx1h3hgqzC5xe4lUlvM7GmWJuenDDNnYiBxkXSZOfIm-tMsyF70ieL6WKEkHGM87QjolBdg.Rf6f03T9JqrFnln_jvdYqw.18rhmQpNTrJ4VbcBMM0ZJPktO_Bbv28D25Obhw11ECLSnNxByW9jMCAkB_5a87naHnoTmrqgvzF1YAw6G6n4KnBQoizlWsxPuZmqOJ6Q8xNJa3pcnwP_s3t415Wc7AONmQgf4KrY2PRlz8eo3OLlVFBbLbdWflOOC4zxFQb3MnQ63CoXDgSpgE-ku93DA4ZlTHIs457xQfMqPGrj2OS-Oi_NAAJW61aq9BxQDi_wSuvB0PNyeKKM0UZKY70UobP1NDnkk0jiZVR-ZgyL7T9Nehdgl2QaDsEpocmX9jV3FKu0ViA_rINl9esuaDdJZ92qApbCbmlblE1CJL3S0RkVSYry2do0DBvWbQxpgN-j2mGf_3EHw41x6dq9viQayRV6t42LkJ0pa7UiiODm6xl99bDEU37LRYnucIm2vvc90KfiTVtd87xolwnNC2bfdgfinrHPdi2ST9DfonE_sXJzF0N-5Ej0KZ-0Oc9aCxJIH40"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 week-5-lasso-assignment-2-blank.ipynb}}\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Save both of these files in the same directory (where you are calling IPython notebook from) and unzip the data file.\cb1 \
\pard\pardeftab720\sl480\sa240

\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If you are not using GraphLab Create\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa280
\ls3\ilvl0
\fs28 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Download the King County House Sales data csv file: {\field{\*\fldinst{HYPERLINK "https://eventing.coursera.org/api/redirectStrict/Pm8T0b_xyh_AkbdfPqETGG64peO1YE883p98BfiOHghkCAYYBiS2_h25Y5xfydQ2JZnWcfJX5wHJFosWI57GWg.o9rHUEUSzUYnvZ21ZM-Xug.pzyQJvLcrLcwAfuEydFTva3EUntaGZM1UA-QQ-Eqq5oE7Mj3aBdsnSRSIZ-y6E7255tfbXsH7viCcBfMZqgnVJTiV9j_KWg2-C90M4ZVzk73V2_XgTe5BHTmWdjHzJ9BQgZ7toIBeCBnjd2W2fguQi8cwc-9cVpJzfHIWEtMuorFbn4HLjJ8hUFIBKgccqNVp3VueBJXGo8GH1wGLpya2ii89z8rrHWfkjUM6q8-em_nBB8XLT5JlZkj4JxIg979cgB_o4Zh7f6OyfT1KaFnNfPjGIc99IpwJZJZIU6cjZBTv69UcczPMJsEz9O0sXMq-oAXXCULkJWxCGQHsYKz-mrfjMRA9fJ3ZeCMEBaVt-TGX8QD4z1JF7TfunhVw4DArVEpWPOPZpHoSgL8K3-OQB4TBHFBWl1QJuUgLDtxM88cBgl-6er_cVRmDK9RnKQx"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 kc_house_data.csv}}\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Download the King County House Sales training data csv file: {\field{\*\fldinst{HYPERLINK "https://eventing.coursera.org/api/redirectStrict/RHQkiuPogBur50bNJfNI-qvzeYo61NFbJW2XrwnRmBY27IbYt0pVOI4eE3zZc_GsB1uJaULSNGwK_i_mtXGxKA.ev4kqroEsox7gVR3zQFgHg.vKquXKgReIz2xTPMVyXGkc49Qvl8qBrt_l3yyKziP3p1xoV6L_HXW1fkUfYN04d9dC6-aQFJDvLoqWxLqng1AVv12zObJe-LfQwJ9RJQ8aVEAMwdgpR0SUxO_acS8iCbv8dHkYGEgM453vWLZOZeGgOXomMztJsMik3gddXeooGmV6CRVe4GCBrnx1iJUL2-Kox3UqEFKtskOlh1M-RVVgFZf6BOPkOgumwNgRSBA0Tw9SSPSe_DnxUOKmtW5a5z1orzFV797n8talNJgi5_pTZaUgdWpc_UP5qg-t4r8A-jiIq6T57E0LDT96YeChETgTenFVcbwLfypJddK1PLmczvFyXzTUVdjN-DYHnR8H_zLnt5-tCBsKgY9F8TqwiDQhbpCyJydeoD31ImJDUUcJ5RdpUFZRcLzAQ9j16Hov6aaYYQJxXlVTQwhxaJt6JnveLjB5EC0wX3G-gU8UvVUg"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 kc_house_train_data.csv}}\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Download the King County House Sales testing data csv file: {\field{\*\fldinst{HYPERLINK "https://eventing.coursera.org/api/redirectStrict/M5ui-0HftT0-cZd5c8fz6NmPblVe0ae4EeDSS7r8_ZQULzOLM1SGJ4J8odA4jqFbI_UIGBzvUOsRrbsLdDSbDg.QSWILqdu1D2Pc-ovLQ6IJg.z5MKDCAguhLabeGdyrFwLEwza6IG20l0u1ikEPc4b4l7Ht_pUP8J1KEcQ9Kx6p4O9rd_dpnBH7ftllNO2S4vzfl8Ei8m_KDA2odfFmxl24WIz9FSisMymbvP6GeoRHO5M6pJAbbWCkrdtWmKNJS2AF2a6g89Zn1XcVfr0eAJKAvSOLgGHzQzU1BoLjpcMeo40q-jhYFzih2VXFGWAtUYAtA5ELZafW-JIj__9tvh11LPfET70UeiiNaIpxiyrpqpJxFwSldtgRsq0e00drQseWOJEZOFgyDZQRnemwac8j3YtUXjVVo69ZBZwv7N7QRrbsuS4nmVHcadauvi-AIfkrK2mpcNLDOVdSxx0CgOJiWmemJxNtWqUZ0vS6hsJ3vwsKFQmPdCjX3EF6-0pQUU5T2gVOiUlhojaOlkGURiLt3TqodudXF_M0GPavUS3in_"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 kc_house_test_data.csv}}\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls4\ilvl0
\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IMPORTANT: use the following types for columns when importing the csv files. Otherwise, they may not be imported correctly: [str, str, float, float, float, float, int, str, int, int, int, int, int, int, int, int, str, float, float, float, float]. If your tool of choice requires a dictionary of types for importing csv files (e.g. Pandas), use:
\b0 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 dtype_dict = \{'bathrooms':float, 'waterfront':int, 'sqft_above':int, 'sqft_living15':float, 'grade':int, 'yr_renovated':int, 'price':float, 'bedrooms':float, 'zipcode':str, 'long':float, 'sqft_lot15':float, 'sqft_living':float, 'floors':str, 'condition':int, 'lat':float, 'date':str, 'sqft_basement':int, 'yr_built':int, 'id':str, 'sqft_lot':int, 'view':int\}\
\pard\pardeftab720\sl480\sa320

\f0\fs44 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Useful resources\
\pard\pardeftab720\sl420\sa280

\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 You may need to install the software tools or use the free Amazon EC2 machine. Instructions for both options are provided in the reading for Module 1 (Simple Regression).\
If you are following the IPython Notebook and/or are new to numpy then you might find the following tutorial helpful: {\field{\*\fldinst{HYPERLINK "https://eventing.coursera.org/api/redirectStrict/jIC2foZeZcRqF8ugGFajubuM8Al2oNFhLBPvvVP3-CzkzWwmuwJpsKyPYg_p3ADDk47UiDXtl_CND8IWkgmk9w.SQRCoukq3lC9xSikf6k6Mw.ZzvwldPA3SRXXdzeouPJRhF3KRBqzpKO0KMGC9laYwsMvRddmAcafZtWItOpNfad0kn_uko_uaOBdwes7M6bpJjS-43bNc82E5rQw6V4ZFBPgfjWVP1GuhEHo-G2IJ49ab1YMhzQSnLLCfrbPa667kpJMsFS0aMABVi9ckaMt3Kz0sWEIY73Yn94KOoX4i3t0PFxS82VXN77r6jx_yFFMwkWMjuJZX2J2NIaHsSPlygFYQ37SO6qR0TVw040E1mmc6HXN4e5e5_X7InUvKIsCYPXBm4XJishztKFtjvJSpQZRaSV41bxBr-I6gpbf9nIiJNkqHOZ-KMO_U1JIdjnA3X3sEppwhr7odXq0E0lnE45llOAPh0CpF5utGaD8e145myzxLTFXq7ImAGYLiY0bs3hIwsukHaq8YyhLuBa4fENosojAuL-iU4vOLe7SCnX"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 numpy-tutorial.ipynb}}\
\pard\pardeftab720\sl480\sa320

\fs44 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If you are using GraphLab Create and the companion IPython Notebook\
\pard\pardeftab720\sl420\sa280

\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Open the companion IPython notebook and follow the instructions in the notebook.\
\pard\pardeftab720\sl480\sa320

\fs44 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If instead you are using other tools to do your homework\
\pard\pardeftab720\sl420\sa280

\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 You are welcome to write your own code and use any other libraries, like Pandas or R, to help you in the process. If you would like to take this path, follow the instructions below.\
\pard\pardeftab720\sl420\sa280

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 1. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If you\'92re using SFrame, import GraphLab Create and load in the house data as follows:\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 sales = graphlab.SFrame('kc_house_data.gl/')\
\pard\pardeftab720\sl420\sa280

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Otherwise, load all the three csv files.\
\pard\pardeftab720\sl420\sa280

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 2. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 If you\'92re using Python: to do the matrix operations required to perform a coordinate descent we will be using the popular python library \'91numpy\'92 which is a computational library specialized for operations on arrays. For students unfamiliar with numpy we have created a numpy tutorial (see useful resources). It is common to import numpy under the name \'91np\'92 for short, to do this execute:\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 import numpy as np\
\pard\pardeftab720\sl420\sa280

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 3. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Next, from Module 2 (Multiple Regression), copy and paste the \'91get_numpy_data\'92 function (or equivalent) that takes a data set, a list of features (e.g. [\'91sqft_living\'92, \'91bedrooms\'92]), to be used as inputs, and a name of the output (e.g. \'91price\'92). This function returns a \'91feature_matrix\'92 (2D array) consisting of first a column of ones followed by columns containing the values of the input features in the data set in the same order as the input list. It also returns an \'91output_array\'92 which is an array of the values of the output in the data set (e.g. \'91price\'92).\
e.g. in Python:\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 def get_numpy_data(data_sframe, features, output):\
    ...\
    return (feature_matrix, output_array)\
\pard\pardeftab720\sl420\sa280

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 4. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Similarly, copy and paste the \'91predict_output\'92 function (or equivalent) from Module 2. This function accepts a 2D array \'91feature_matrix\'92 and a 1D array \'91weights\'92 and return a 1D array \'91predictions\'92.\
e.g. in Python:\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 def predict_output(feature_matrix, weights):\
    ...\
    return predictions\
\pard\pardeftab720\sl420\sa280

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 5. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 In the house dataset, features vary wildly in their relative magnitude: \'91sqft_living\'92 is very large overall compared to \'91bedrooms\'92, for instance. As a result, weight for \'91sqft_living\'92 would be much smaller than weight for \'91bedrooms\'92. This is problematic because \'93small\'94 weights are dropped first as l1_penalty goes up.\
To give equal considerations for all features, we need to normalize features as discussed in the lectures: we divide each feature by its 2-norm so that the transformed feature has norm 1.\

\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 6. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Write a short function called \'91normalize_features(feature_matrix)\'92, which normalizes columns of a given feature matrix. The function should return a pair \'91(normalized_features, norms)\'92, where the second item contains the norms of original features. As discussed in the lectures, we will use these norms to normalize the test data in the same way as we normalized the training data.\
e.g. in Python:\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 def normalize_features(features):\
    ...\
    return (normalized_features, norms)\
\pard\pardeftab720\sl420\sa280

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hint: If you are using Numpy, a handy shorthand for computing 2-norms of columns is\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 norms = np.linalg.norm(X, axis=0)\
\pard\pardeftab720\sl420\sa280

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To normalize columns, perform element-wise division.\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 X_normalized = X / norms\
\pard\pardeftab720\sl480\sa240

\f0\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Review of Coordinate Descent\
\pard\pardeftab720\sl420\sa280

\b\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 7. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 We seek to obtain a sparse set of weights by minimizing the LASSO cost function\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 SUM[ (prediction - output)^2 ] + lambda*( |w[1]| + ... + |w[k]|).\
\pard\pardeftab720\sl420\sa280

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 (By convention, we do not include w[0] in the L1 penalty term. We never want to push the intercept to zero.)\
The absolute value sign makes the cost function non-differentiable, so simple gradient descent is not viable (you would need to implement a method called subgradient descent). Instead, we will use coordinate descent: at each iteration, we will fix all weights but weight i and find the value of weight i that minimizes the objective. That is, we look for\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 argmin_\{w[i]\} [ SUM[ (prediction - output)^2 ] + lambda*( |w[1]| + ... + |w[k]|) ]\
\pard\pardeftab720\sl420\sa280

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 where all weights other than w[i] are held to be constant. We will optimize one w[i] at a time, circling through the weights multiple times.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa280
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Pick a coordinate i\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Compute w[i] that minimizes the LASSO cost function\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls5\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Repeat the two steps for all coordinates, multiple times\cb1 \
\pard\pardeftab720\sl420\sa280

\b \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 8. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 For this assignment, we use cyclical coordinate descent with normalized features, where we cycle through coordinates 0 to (d-1) in order, and assume the features were normalized as discussed above. The formula for optimizing each coordinate is as follows:\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3        \uc0\u9484  (ro[i] + lambda/2)    if ro[i] < -lambda/2\
w[i] = \uc0\u9500  0                     if -lambda/2 <= ro[i] <= lambda/2\
       \uc0\u9492  (ro[i] - lambda/2)    if ro[i] > lambda/2\
\pard\pardeftab720\sl420\sa280

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 where\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 ro[i] = SUM[ [feature_i]*(output - prediction + w[i]*[feature_i]) ].\
\pard\pardeftab720\sl420\sa280

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Note that we do not regularize the weight of the constant feature (intercept) w[0], so, for this weight, the update is simply:\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 w[0] = ro[i]\
\pard\pardeftab720\sl480\sa240

\f0\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Effect of L1 penalty\
\pard\pardeftab720\sl420\sa280

\b\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 9. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Consider a simple model with 2 features: \'91sqft_living\'92 and \'91bedrooms\'92. The output is \'91price\'92.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa280
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 First, run get_numpy_data() (or equivalent) to obtain a feature matrix with 3 columns (constant column added). Use the entire \'91sales\'92 dataset for now.\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Normalize columns of the feature matrix. Save the norms of original features as \'91norms\'92.\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Set initial weights to [1,4,1].\cb1 \
\ls6\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make predictions with feature matrix and initial weights.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls6\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Compute values of ro[i], where\cb1 \
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 ro[i] = SUM[ [feature_i]*(output - prediction + w[i]*[feature_i]) ]\
\pard\pardeftab720\sl420\sa280

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 10. 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Quiz Question: Recall that, whenever ro[i] falls between -l1_penalty/2 and l1_penalty/2, the corresponding weight w[i] is sent to zero. Now suppose we were to take one step of coordinate descent on either feature 1 or feature 2. What range of values of l1_penalty \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 would not\expnd0\expndtw0\kerning0
\ulnone \outl0\strokewidth0  set w[1] zero, but \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 would\expnd0\expndtw0\kerning0
\ulnone \outl0\strokewidth0  set w[2] to zero, if we were to take a step in that coordinate?
\i0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \

\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 11. 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Quiz Question: What range of values of l1_penalty would set \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 both\expnd0\expndtw0\kerning0
\ulnone \outl0\strokewidth0  w[1] and w[2] to zero, if we were to take a step in that coordinate?
\i0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
So we can say that ro[i] quantifies the significance of the i-th feature: the larger ro[i] is, the more likely it is for the i-th feature to be retained.\
\pard\pardeftab720\sl480\sa240

\fs40 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Single Coordinate Descent Step\
\pard\pardeftab720\sl420\sa280

\b\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 12. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Using the formula above, implement coordinate descent that minimizes the cost function over a single feature i. Note that the intercept (weight 0) is not regularized. The function should accept feature matrix, output, current weights, l1 penalty, and index of feature to optimize over. The function should return new weight for feature i.\
e.g. in Python:\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 def lasso_coordinate_descent_step(i, feature_matrix, output, weights, l1_penalty):\
    # compute prediction\
    prediction = ...\
    # compute ro[i] = SUM[ [feature_i]*(output - prediction + weight[i]*[feature_i]) ]\
    ro_i = ...\
    \
    if i == 0: # intercept -- do not regularize\
        new_weight_i = ro_i\
    elif ro_i < -l1_penalty/2.:\
        new_weight_i = ...\
    elif ro_i > l1_penalty/2.:\
        new_weight_i = ...\
    else:\
        new_weight_i = 0.\
    \
    return new_weight_i\
\pard\pardeftab720\sl420\sa280

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If you are using Numpy, test your function with the following snippet:\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 # should print 0.425558846691\
import math\
print lasso_coordinate_descent_step(1, np.array([[3./math.sqrt(13),1./math.sqrt(10)],\
                   [2./math.sqrt(13),3./math.sqrt(10)]]), np.array([1., 1.]), np.array([1., 4.]), 0.1)\
\pard\pardeftab720\sl480\sa240

\f0\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Cyclical coordinate descent\
\pard\pardeftab720\sl420\sa280

\b\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 13. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Now that we have a function that optimizes the cost function over a single coordinate, let us implement cyclical coordinate descent where we optimize coordinates 0, 1, ..., (d-1) in order and repeat.\
When do we know to stop? Each time we scan all the coordinates (features) once, we measure the change in weight for each coordinate. If no coordinate changes by more than a specified threshold, we stop.\
For each iteration:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa280
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 As you loop over features in order and perform coordinate descent, measure how much each coordinate changes.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls7\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 After the loop, if the maximum change across all coordinates is falls below the tolerance, stop. Otherwise, go back to the previous step.\cb1 \
\pard\pardeftab720\sl420\sa280
\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Return weights\
The function should accept the following parameters:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa280
\ls8\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Feature matrix\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Output array\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Initial weights\cb1 \
\ls8\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 L1 penalty\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls8\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Tolerance\cb1 \
\pard\pardeftab720\sl420\sa280
\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 e.g. in Python:\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 def lasso_cyclical_coordinate_descent(feature_matrix, output, initial_weights, l1_penalty, tolerance):\
    ...\
    return weights\
\pard\pardeftab720\sl420\sa280

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 14. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Let us now go back to the simple model with 2 features: \'91sqft_living\'92 and \'91bedrooms\'92. Using \'91get_numpy_data\'92 (or equivalent), extract the feature matrix and the output array from from the house dataframe. Then normalize the feature matrix using \'91normalized_features()\'92 function.\
Using the following parameters, learn the weights on the sales dataset.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa280
\ls9\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Initial weights = all zeros\cb1 \
\ls9\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 L1 penalty = 1e7\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls9\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Tolerance = 1.0\cb1 \
\pard\pardeftab720\sl420\sa280

\b \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 15. 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Quiz Question: What is the RSS of the learned model on the normalized dataset?
\i0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \

\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 16. 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Quiz Question: Which features had weight zero at convergence?
\i0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl480\sa240

\fs40 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Evaluating LASSO fit with more features\
\pard\pardeftab720\sl420\sa280

\b\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 17. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Let us split the sales dataset into training and test sets. If you are using GraphLab Create, call \'91random_split\'92 with .8 ratio and seed=0. Otherwise, please down the corresponding csv files from the downloads section.\

\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 18. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Create a normalized feature matrix from the TRAINING data with the following set of features.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 bedrooms, bathrooms, sqft_living, sqft_lot, floors, waterfront, view, condition, grade, sqft_above, sqft_basement, yr_built, yr_renovated\cb1 \
\pard\pardeftab720\sl420\sa280
\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Make sure you store the norms for the normalization, since we\'92ll use them later.\
\pard\pardeftab720\sl420\sa280

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 19. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 First, learn the weights with l1_penalty=1e7, on the training data. Initialize weights to all zeros, and set the tolerance=1. Call resulting weights\'92 weights1e7\'92, you will need them later.\

\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 20. 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Quiz Question: What features had non-zero weight in this case?
\i0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
21. Next, learn the weights with l1_penalty=1e8, on the training data. Initialize weights to all zeros, and set the tolerance=1. Call resulting weights \'91weights1e8\'92, you will need them later.\

\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 22. 
\i \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Quiz Question: What features had non-zero weight in this case?
\i0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
23. Finally, learn the weights with l1_penalty=1e4, on the training data. Initialize weights to all zeros, and set the tolerance=5e5. Call resulting weights \'91weights1e4\'92, you will need them later. (This case will take quite a bit longer to converge than the others above.)\
24. 
\i\b \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Quiz Question: What features had non-zero weight in this case?
\i0\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\sl480\sa240

\fs40 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Rescaling learned weights\
\pard\pardeftab720\sl420\sa280

\b\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 25. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Recall that we normalized our feature matrix, before learning the weights. To use these weights on a test set, we must normalize the test data in the same way. Alternatively, we can rescale the learned weights to include the normalization, so we never have to worry about normalizing the test data:\
In this case, we must scale the resulting weights so that we can make predictions with original features:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls11\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Store the norms of the original features to a vector called \'91norms\'92:\cb1 \
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 features, norms = normalize_features(features)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa280
\ls12\ilvl0
\f0\fs28 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Run Lasso on the normalized features and obtain a \'91weights\'92 vector\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls12\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Compute the weights for the original features by performing element-wise division, i.e.\cb1 \
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 weights_normalized = weights / norms\
\pard\pardeftab720\sl420\sa280

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Now, we can apply weights_normalized to the test data, without normalizing it!\
\pard\pardeftab720\sl420\sa280

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 26. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Create a normalized version of each of the weights learned above. (\'91weights1e4\'92, \'91weights1e7\'92, \'91weights1e8\'92). To check your results, if you call \'91normalized_weights1e7\'92 the normalized version of \'91weights1e7\'92, then\
\pard\pardeftab720\sl360

\f1\fs26 \cf3 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 print normalized_weights1e7[3]\
\pard\pardeftab720\sl420\sa280

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 should print 161.31745624837794.\
\pard\pardeftab720\sl480\sa240

\fs40 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Evaluating each of the learned models on the test data\
\pard\pardeftab720\sl420\sa280

\b\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 27. 
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Let's now evaluate the three models on the test data. Extract the feature matrix and output array from the TEST set. But this time, do NOT normalize the feature matrix. Instead, use the normalized version of weights to make predictions.\
Compute the RSS of each of the three normalized weights on the (unnormalized) feature matrix.\
\pard\pardeftab720\sl420

\b \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 28. Quiz Question: Which model performed best on the test data?
\b0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
}